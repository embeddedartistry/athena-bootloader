#!groovy
@Library('jenkins-pipeline-lib') _

pipeline
{
  agent any
  environment
  {
    GIT_CHANGE_LOG = gitChangeLog(currentBuild.changeSets)
  }
  parameters
  {
    string(defaultValue: '11', description: 'Major version number (x.0.0)', name: 'MAJOR_VERSION')
    string(defaultValue: '3', description: 'Minor version number (0.x.0)', name: 'MINOR_VERSION')
  }
  stages
  {
    stage('Setup')
    {
      steps
      {
        echo 'Running make clean...'
        sh 'make distclean'

        gitTagPreBuild "${params.MAJOR_VERSION}.${params.MINOR_VERSION}.${BUILD_NUMBER}"
      }
    }
    stage('Build')
    {
      steps
      {
        sh 'make'
      }
    }
    stage('Commit Updated Images')
    {
      steps
      {

        sh 'git checkout master'
        sh 'git pull'
        sh 'git commit -am "Updating firmware images with latest version number."'
        sh 'git push'
      }
    }
    stage('Package')
    {
      steps
      {
        sh 'make package'
        sh 'make dist'
      }
    }
    stage('Archive')
    {
      steps
      {
        echo 'Archiving artifacts'
        dir('buildresults/release')
        {
          archiveArtifacts 'athena_bootloaders-*'
        }
        dir('buildresults/meson-dist')
        {
          archiveArtifacts 'AthenaBootloaderProjectFiles-*'
        }
      }
      post
      {
        failure
        {
          sendNotifications 'ARCHIVE_ERROR'
        }
      }
    }
  }
  post
  {
    always
    {
      // Scan for open tasks, warnings, issues, etc.
      recordIssues(
        enabledForFailure: true,
        healthy: 5,
        unhealthy: 10,
        referenceJobName: 'ea-nightly/libmemory/master',
        qualityGates: [
          // 3 new issue: unstable
          [threshold: 15, type: 'DELTA', unstable: true],
          // 5 new issues: failed build
          [threshold: 15, type: 'DELTA', unstable: false],
          // 10 total issues: unstable
          [threshold: 15, type: 'TOTAL', unstable: true],
          // 20 total issues: fail
          [threshold: 15, type: 'TOTAL', unstable: false]
        ],
        tools: [
          // TODO: re-enable: clang(),
          taskScanner(
            excludePattern: 'buildresults/**, dependencies/**, build/**',
            includePattern: '**/*.c, **/*.cpp, **/*.h, **/*.hpp, **/*.lua, **/*.sh, **/*.build',
            normalTags: 'TODO, to do, WIP',
            highTags: 'FIXME, FIX',
            ignoreCase: true,
          ),
          //cppCheck(
          //  pattern: 'buildresults/**/cppcheck.xml',
          //),
        ]
      )

      // Report Status
      slackNotify(currentBuild.currentResult)
      gitTagCleanup "${params.MAJOR_VERSION}.${params.MINOR_VERSION}.${BUILD_NUMBER}"
    }
    success
    {
      githubSetConfig('69e4682e-2951-492f-b828-da06364c322d')
      // Release step creates a tag
      githubUploadRelease("${params.MAJOR_VERSION}.${params.MINOR_VERSION}.${BUILD_NUMBER}",
        'buildresults/release/*.zip, buildresults/meson-dist/AthenaBootloaderProjectFiles-*')
    }
    failure
    {
      /*
      * This job does not have a GitHub configuration,
      * so we need to create a dummy config
      */
      githubSetConfig('69e4682e-2951-492f-b828-da06364c322d')
      githubFileIssue()
      emailNotify(currentBuild.currentResult)
    }
  }
}
